from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import joblib
import numpy as np
import logging
from flask_cors import CORS

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

app = Flask(__name__)
CORS(app)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:555@localhost/air_quality'  
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ scaler
try:
    model = joblib.load("backend/health_risk_model.pkl")
    scaler = joblib.load("backend/scaler.pkl")
    logging.info("‚úÖ –ú–æ–¥–µ–ª—å —Ç–∞ Scaler —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.")
except Exception as e:
    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {e}")
    model, scaler = None, None

# –ú–æ–¥–µ–ª—å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
class AirQuality(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.String(50))
    sensor_id = db.Column(db.Integer)
    sensor_type = db.Column(db.String(50))
    latitude = db.Column(db.Float)
    longitude = db.Column(db.Float)
    temperature = db.Column(db.Float)
    humidity = db.Column(db.Float)
    co2 = db.Column(db.Float)
    pm2_5 = db.Column(db.Float)
    pm10 = db.Column(db.Float)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É —Ä–∏–∑–∏–∫—É –∑–¥–æ—Ä–æ–≤'—è
def health_impact_model(data):
    try:
        logging.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω—ñ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {data}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞
        if model is None or scaler is None:
            logging.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ `train_model.py` –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ.")
            return None

        # –§–æ—Ä–º—É—î–º–æ –≤—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤
        new_data = np.array([[data.get("pm2_5", 0), data.get("co2", 0), data.get("temperature", 0), data.get("humidity", 0)]])
        new_data_scaled = scaler.transform(new_data)  # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è

        prediction = model.predict(new_data_scaled)
        logging.info(f"üéØ –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∏–∑–∏–∫—É –∑–¥–æ—Ä–æ–≤'—è: {prediction[0]}")
        return int(prediction[0])

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É –º–æ–¥–µ–ª—ñ: {e}")
        return None

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
@app.route('/api/data', methods=['GET'])
def get_data():
    records = AirQuality.query.all()
    return jsonify([{
        "timestamp": record.timestamp,
        "sensor_id": record.sensor_id,
        "sensor_type": record.sensor_type,
        "latitude": record.latitude,
        "longitude": record.longitude,
        "temperature": record.temperature,
        "humidity": record.humidity,
        "co2": record.co2,
        "pm2_5": record.pm2_5,
        "pm10": record.pm10
    } for record in records])

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É —Ä–∏–∑–∏–∫—É –∑–¥–æ—Ä–æ–≤'—è
@app.route('/predict_health', methods=['POST'])
def predict_health():
    try:
        data = request.json
        if not data:
            return jsonify({"error": "‚ùå No data received"}), 400

        logging.info(f"üì§ –û—Ç—Ä–∏–º–∞–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑: {data}")
        health_risk = health_impact_model(data)

        if health_risk is None:
            return jsonify({"error": "‚ùå Prediction failed"}), 500

        return jsonify({"health_risk": health_risk}), 200

    except Exception as e:
        logging.error(f"‚ùå Flask –ø–æ–º–∏–ª–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

# –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
@app.route('/')
def index():
    return "‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î!"

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(debug=True, port=5000)
